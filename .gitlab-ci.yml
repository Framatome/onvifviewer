# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  before_script: 
    - apt update && apt -y install cmake debhelper extra-cmake-modules kdoctools-dev libkf5declarative-dev libqt5svg5-dev pkg-kde-tools plasma-framework-dev qtbase5-dev qtdeclarative5-dev qttools5-dev-tools git qtquickcontrols2-5-dev
    - git clone https://github.com/caspermeijn/KDSoap.git
    - mkdir build-kdsoap
    - cd build-kdsoap
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/ ../KDSoap
    - make install
    - cd ..
    - git clone --branch v5.44.0 https://github.com/KDE/extra-cmake-modules.git
    - mkdir build-ecm
    - cd build-ecm
    - cmake -DCMAKE_BUILD_TYPE=Release ../extra-cmake-modules
    - make install
    - cd ..
    - git clone --branch v5.44.0 https://github.com/KDE/kirigami.git
    - mkdir build-kirigami
    - cd build-kirigami
    - cmake -DCMAKE_BUILD_TYPE=Release ../kirigami
    - make install
    - cd ..
    - cd 3rdparty
    - git clone --branch v5.44.0 https://github.com/KDE/breeze-icons.git
    - cd ..
  script: 
    - mkdir build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make
  artifacts:
    paths:
      - build/src/onvifviewer
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
#test:
#  stage: test
#  script:
#    - ./runmytests.sh
